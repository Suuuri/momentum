# 데이터 타입
    - string : text형식. '', ""를 사용해서 선언
    - 숫자형 : 값을 저장할수 있다. (variable)
        +) variable을 만드는 두가지 옵션
            1. const : 참조할 떄 실제로 가서 그 값을 확인함. 
                ex) const a = 5;
                    console.log(a);   // 콘솔에 값이 a로 출력됨.
                        variable을 업데이트하고 싶을때 업데이트를 할 수 없음. 
            2. let : const와 동일하게 값을 기억하고 있으나 업데이트를 할 수 있음. 
                ex) let isNicoFat = true;
                    console.log(isNicoFat); //콘솔에 true로 표시됨
                    isNicoFat = false; //값을 업데이트 할때에는 let 안붙여도됨. 
                    console.log(isNicoFat); //콘솔에 false로 표시됨. 
        +) !!규칙!! 
            되도록 const를 사용하고 필요하다면 let을 사용해도 되나 절대로 var를 사용하지말것. 
    - Boolean :  1,0 / true, false. 두가지 옵션만 존재. 
    - null : 비어있다는 뜻. 공백과 다르다.(variable 안에 아무것도 없을때 사용)
    - undefined : 변수에 값을 부여하지 않은 상태. 
        ex) let hello;
            console.log(hello); // 콘솔에 값이 undefined으로 표시된다. 

            hello는 존재하지만 안에 아무것도 없다!!
            null과 비교했을 때 null은 "비어있음"이 들어있는 거고 undefined은 아무것도 없는 상태

# 배열(array) 
    const days = []; //배열 생성

    const me = "pretty"
    const days = [1,2,false,true, null, undefined, "text", me]; // 배열 안에는 원하는 어떤 값이든 들어갈 수 있다. 

    days[2];
    console.log(days[2]); // 콘솔출력 false

    배열의 내용을 업데이트 할수도 있다. 
        ex) const toBuy = ["potato", "tomato", "pizza"];
            console.log(toBuy); // ["potato", "tomato", "pizza"]
            tobuy[2] = "water"
            console.log(tobay); //["potato", "tomato", "water"]

    배열의 내용을 추가할 수 있다. 
        ex) ...(위의 예시 그대로)
            toBuy.push("meat");
            console.log(toBuy); //["potato", "tomato", "water", "meat"]
        
# object : 연관되어있는 property들을 그룹으로 묶어서 저장할때 사용. 
    const player = {
        name: "Nico",
        age: 98, 
    };

    player.name;
    console.log(player.name) // Nico

    array처럼 업데이트 할수도 있음. 
    player.name = "nicolas";
    console.log(player); //{name: "nicolas", age: 98}

    object의 item을 업데이트 할수 있음. 
    player.sexy = "soon"
    console.log(player); //{name: "nicolas", age: 98, sexy: soon}

# function : 어떤 코드를 캡슐화해서 그걸 계속 반복해서 사용할수 있도록 함. 
    function plus() {
        console.log(2 + 2);
    }

    plus(); // 4

    자리 대체자를 사용한 함수 표현법 
    function plus(a, b) {
        console.log(a + b);
    }

    plus(5, 10); // 15

    많은 argument를 보내더라도 자리대체자 수만큼만 받는다.
    function minusFive(patato) {
        console.log(patato - 5);
    }

    minusFive(5, 10, 12, 34, 4, 5, 6, 7); // 0

    +) potato는 function 밖에서는 인식되지않음. 
    function minusFive(patato) {
        console.log(patato - 5);
    }

    console.log(potato); //ERROR!! (정의되지 않았으므로)
    minusFive(5, 10, 12, 34, 4, 5, 6, 7); // 0

#return vs console.log
    console.log는 값을 저장하지 않고 단순히 콘솔에 출력해주는 역할임. (주스를 만들었는데 주스를 꺼내지 못하고 보고만 있는 상황)
    return은 값을 저장함. (만들어진 주스를 꺼낼수 있음.)

    한번 return 하면 function은 작동을 멈추고 결과값을 return하고 끝남. 

    
# 

     한개의 =는 value를 할당함.
     세개의 ===은 값을 확인함. 

/*
true || true === true
false || true === true
true || false === true
false || false === false

true && true === true
true && false === false
false && true === false
false && false === false
 */



# js로 html로 호출하는 방법들은, 대게 코드를 사용해서 불러올 수 있다.  
  이때 쓰는 코드는 다음과 같다.
    -getElementById(): 해당 아이디 하나만 불러올 수 있다.
    -getElementByClassName(): 해당 클래스네임으로 불러올 수 있으며, 동일요소가 있을 시 배열형태로 보여준다.
    -getElementByTag(): 해당태그를 불러올 수 있으며,중복요소가 있으면, 배열형태로 나타낸다.
    *-queryselect/querySelectAll= 해당 태그 및 아이디 클래스명에 속한 요소들을 콜링할 수 있으며 중복요소가 많을 시 queryselect는 첫번째 요소만, queryselectAll은 모든 조건들을 보여준다.

# 
    - 지금 js파일이 있기 때문에 js를 통해 html의 내용을 가져올 수 있는 거임
    - document가 html이 js파일을 load하기 때문에 존재 → 그 다음에 browser가 우리가 document에 접근할 수 있게 해줌
    - element의 내부를 보고 싶으면 console.dir()
      기본적으로 object로 표시한 element를 보여줌(전부 js object임)
      그 element 중 앞에 on이 붙은 것들은 event임
    - event: 어떤 행위를 하는 것
      모든 event는 js가 listen할 수 있음
    - eventListener : event를 listen함 → js에게 무슨 event를 listen하고 싶은 지 알려줘야 함
    - title.addEventListener("click") : 누군가가 title을 click하는 것을 listen할 거임 → 무언가를 해줘야함

const title = document.querySelector("div.hello:first-child h1");

function handleTitleClick(){
title.style.color = "blue";
}
title.addEventListener("click",handleTitleClick);

//click하면 handleTitleClick이라는 function이 동작하길 원함
//그래서 handle~ 함수에 () 를 안넣은 것임
//즉, js가 대신 실행시켜주길 바라는 것임!

    - function이 js에게 넘겨주고 유저가 title을 click할 경우에 js가 실행버튼을 대신 눌러주길 바라는 것임( 직접 handleTitleClick(); 이렇게 하는 것이 아니라)
    - 함수에서 () 이 두 괄호를 추가함으로써 실행버튼을 누를 수 있는 거임


# 로그인 화면 구현

css 파일에는 .hidden이 존재하고 이 역할은 display: none (요소를 숨기는 것)
자바스크립트를 불러오기 전부터 두 요소는 숨겨져있음(Html의 form, h1. hiddem 클래스가 있기 때문에 숨겨져있음)

1. 자바스크립트에서는 local storage를 제일먼저 확인함. 
    local storage는 브라우저가 가지고 있는 작은 DB같은 API임.

    local storage에 없는 정보를 불러오려 하면 null값을 받음.
        localStorage.getItem("Jiwon") -> null
    username처럼 localStorage에 존재하는 정보를 불러오려 하면 그 키에 해당하는 value를 받게 됨.
        localStorage.getItem("username") -> "Jiwon"
     이경우에는 localStorage를 살펴보면 key랑 value가 있음. 보는법은 검사->application



 